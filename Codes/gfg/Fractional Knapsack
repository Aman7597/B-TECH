
bool cmp(pair<double,pair<int,int>>a,pair<double,pair<int,int>>b){
    return a.first>b.first;
    
    
}


class Solution
{
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int w, Item a[], int n)
    {
       
        
        
        vector<pair<double,pair<int,int>>>v;
        for(int i=0;i<n;i++){
            double z=((double)a[i].value/(double)a[i].weight);
            v.push_back(make_pair(z,make_pair(a[i].value,a[i].weight)));
        
        }
        
        
        sort(v.begin(),v.end(),cmp);
        
       
        double ans=0;
        int k=0;
        for(int i=0;i<n;i++){
            k=i;
            if(w-v[i].second.second<=0) break;
            ans+=v[i].second.first;
            w-=v[i].second.second;
             if(w>0 && i==n-1) return ans;
            
        }
        if(w==0) return ans;
     
        double t=v[k].first*w;
        ans+=t;
        return ans;
       
        
    }
        
};
